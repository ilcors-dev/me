---
export interface Props {
	className?: string;
}

const { className } = Astro.props;
---

<button
	id="theme-switcher"
	type="button"
	class={`h-10 w-10 origin-[right_center] flex items-center justify-center transition-all duration-500 ${className} p-4 hover:dark:bg-slate-50/20 hover:bg-black/10 rounded`}
>
	<div id="icon-theme-light" class="flex items-center justify-center">
		<span class="material-symbols-outlined"> light_mode</span>
		<span class="sr-only">Use light theme</span>
	</div>
	<div id="icon-theme-dark" class="flex hidden items-center justify-center">
		<span class="material-symbols-outlined"> dark_mode</span>
		<span class="sr-only">Use dark theme</span>
	</div>
</button>

<script>
	import invariant from 'tiny-invariant';

	const themes: ('light' | 'dark')[] = ['light', 'dark'];
	const button = document.querySelector('#theme-switcher');

	invariant(button, 'button should not be null');

	/**
	 * Setup the theme based on the user's saved preference or the system preference if no preference is saved.
	 */
	const setup = () => {
		const themeSaved = localStorage.getItem('theme');

		if (themeSaved) {
			document.documentElement.classList.add(themeSaved);
		} else {
			const prefersDark = window.matchMedia(
				'(prefers-color-scheme: dark)'
			).matches;
			document.documentElement.classList.add(prefersDark ? 'dark' : 'light');
		}

		window
			.matchMedia('(prefers-color-scheme: dark)')
			.addEventListener('change', (event) => {
				if (!localStorage.getItem('theme')) {
					document.documentElement.classList.add(
						event.matches ? 'dark' : 'light'
					);
				}
			});

		updateIcon();
	};

	const getThemeCurrent = () =>
		document.documentElement.classList.contains('dark') ? 'dark' : 'light';

	/**
	 * Get the next theme in the list of themes.
	 */
	const getThemeNext = (): 'light' | 'dark' => {
		const themeCurrent = getThemeCurrent();

		invariant(themeCurrent, 'themeCurrent should not be undefined');

		const indexThemeCurrent = themes.indexOf(themeCurrent);

		return themes[(indexThemeCurrent + 1) % themes.length];
	};

	/**
	 * Update the icon to reflect the current theme.
	 */
	const updateIcon = () => {
		const themeCurrent = getThemeCurrent();

		document
			.querySelector(`#icon-theme-${themeCurrent}`)
			?.classList.add('hidden');

		const themeNext = getThemeNext();

		document
			.querySelector(`#icon-theme-${themeNext}`)
			?.classList.remove('hidden');
	};

	/**
	 * Toggle the theme when the button is clicked.
	 */
	button.addEventListener('click', () => {
		const themeCurrent = getThemeCurrent();
		const themeNext = getThemeNext();

		document.documentElement?.classList.toggle(themeCurrent);
		document.documentElement?.classList.toggle(themeNext);

		localStorage.setItem('theme', themeNext);

		updateIcon();
	});

	setup();
</script>

<style></style>
